const std = @import("std");

pub fn build(b: *std.Build) void {
    // 设置目标平台和优化模式 | Set target platform and optimization mode
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    // 创建可执行文件 | Create executable
    const exe = b.addExecutable(.{
        .name = "zig-rust-demo",
        .root_source_file = b.path("zig-test/main.zig"),
        .target = target,
        .optimize = optimize,
    });

    // 添加 Rust 库的搜索路径 | Add Rust library search path
    // target/debug 是 Cargo 默认的调试构建输出目录 | target/debug is Cargo's default debug build output directory
    exe.addLibraryPath(b.path("target/debug"));

    // 链接 Rust 生成的动态库 | Link the dynamic library generated by Rust
    // linkSystemLibrary 会自动处理不同平台的库文件命名 | linkSystemLibrary automatically handles library naming for different platforms
    // (Windows: hush_demo.dll, macOS: libhush_demo.dylib, Linux: libhush_demo.so)
    exe.linkSystemLibrary("hush_demo");

    // 链接系统 C 库（因为我们使用了 C ABI）| Link system C library (because we use C ABI)
    exe.linkLibC();

    // 安装可执行文件到输出目录 | Install executable to output directory
    b.installArtifact(exe);

    // 创建运行步骤 | Create run step
    const run_cmd = b.addRunArtifact(exe);
    run_cmd.step.dependOn(b.getInstallStep());

    // 如果构建时传递了参数，转发给程序 | Forward arguments to program if passed during build
    if (b.args) |args| {
        run_cmd.addArgs(args);
    }

    // 创建 "run" 步骤，可以通过 `zig build run` 执行 | Create "run" step, can be executed with `zig build run`
    const run_step = b.step("run", "Run the app");
    run_step.dependOn(&run_cmd.step);

    // 创建测试步骤（可选）| Create test step (optional)
    const unit_tests = b.addTest(.{
        .root_source_file = b.path("zig-test/main.zig"),
        .target = target,
        .optimize = optimize,
    });

    const run_unit_tests = b.addRunArtifact(unit_tests);
    const test_step = b.step("test", "Run unit tests");
    test_step.dependOn(&run_unit_tests.step);
}
